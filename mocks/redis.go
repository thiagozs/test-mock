// Code generated by MockGen. DO NOT EDIT.
// Source: dbs/redis.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDispatchServices is a mock of DispatchServices interface
type MockDispatchServices struct {
	ctrl     *gomock.Controller
	recorder *MockDispatchServicesMockRecorder
}

// MockDispatchServicesMockRecorder is the mock recorder for MockDispatchServices
type MockDispatchServicesMockRecorder struct {
	mock *MockDispatchServices
}

// NewMockDispatchServices creates a new mock instance
func NewMockDispatchServices(ctrl *gomock.Controller) *MockDispatchServices {
	mock := &MockDispatchServices{ctrl: ctrl}
	mock.recorder = &MockDispatchServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDispatchServices) EXPECT() *MockDispatchServicesMockRecorder {
	return m.recorder
}

// Ping mocks base method
func (m *MockDispatchServices) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping
func (mr *MockDispatchServicesMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDispatchServices)(nil).Ping))
}

// QueueSet mocks base method
func (m *MockDispatchServices) QueueSet(queue, json string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueSet", queue, json)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueSet indicates an expected call of QueueSet
func (mr *MockDispatchServicesMockRecorder) QueueSet(queue, json interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSet", reflect.TypeOf((*MockDispatchServices)(nil).QueueSet), queue, json)
}

// QueueGet mocks base method
func (m *MockDispatchServices) QueueGet(queue string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueGet", queue)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueGet indicates an expected call of QueueGet
func (mr *MockDispatchServicesMockRecorder) QueueGet(queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueGet", reflect.TypeOf((*MockDispatchServices)(nil).QueueGet), queue)
}

// QueueRangeList mocks base method
func (m *MockDispatchServices) QueueRangeList(queue string, start, end int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueRangeList", queue, start, end)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueRangeList indicates an expected call of QueueRangeList
func (mr *MockDispatchServicesMockRecorder) QueueRangeList(queue, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueRangeList", reflect.TypeOf((*MockDispatchServices)(nil).QueueRangeList), queue, start, end)
}

// QueueTrim mocks base method
func (m *MockDispatchServices) QueueTrim(queue string, start, end int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueTrim", queue, start, end)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueTrim indicates an expected call of QueueTrim
func (mr *MockDispatchServicesMockRecorder) QueueTrim(queue, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueTrim", reflect.TypeOf((*MockDispatchServices)(nil).QueueTrim), queue, start, end)
}

// QueueGetList mocks base method
func (m *MockDispatchServices) QueueGetList(queue string, amount int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueGetList", queue, amount)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueGetList indicates an expected call of QueueGetList
func (mr *MockDispatchServicesMockRecorder) QueueGetList(queue, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueGetList", reflect.TypeOf((*MockDispatchServices)(nil).QueueGetList), queue, amount)
}

// QueueSize mocks base method
func (m *MockDispatchServices) QueueSize(queue string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueSize", queue)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueSize indicates an expected call of QueueSize
func (mr *MockDispatchServicesMockRecorder) QueueSize(queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSize", reflect.TypeOf((*MockDispatchServices)(nil).QueueSize), queue)
}

// Incr mocks base method
func (m *MockDispatchServices) Incr(key string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Incr", key)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Incr indicates an expected call of Incr
func (mr *MockDispatchServicesMockRecorder) Incr(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockDispatchServices)(nil).Incr), key)
}

// Decr mocks base method
func (m *MockDispatchServices) Decr(key string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decr", key)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decr indicates an expected call of Decr
func (mr *MockDispatchServicesMockRecorder) Decr(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decr", reflect.TypeOf((*MockDispatchServices)(nil).Decr), key)
}

// Del mocks base method
func (m *MockDispatchServices) Del(key string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", key)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Del indicates an expected call of Del
func (mr *MockDispatchServicesMockRecorder) Del(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockDispatchServices)(nil).Del), key)
}

// Get mocks base method
func (m *MockDispatchServices) Get(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockDispatchServicesMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDispatchServices)(nil).Get), key)
}
